const config = require('../config')
const { cmd, commands } = require('../command')
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson} = require('../lib/functions')

cmd({
    pattern: "tagall",
    react: "üîä",
    alias: ["gc_tagall"],
    desc: "To Tag all Members",
    category: "group",
    use: '.tagall [message]',
    filename: __filename
},
async (conn, mek, m, { from, isGroup, isOwner, sender, groupMetadata, participants, isAdmins, reply, args }) => {
    try {
        if (!isGroup) return reply("‚ùå This command can only be used in groups.");
        
        // Robust Permission Check (Admin, Group Creator, or Bot Owner)
        const isGroupCreator = groupMetadata.owner && groupMetadata.owner === sender;
        if (!isAdmins && !isGroupCreator && !isOwner) {
            return reply("‚ùå Only group admins, the group creator, or the bot owner can use this command.");
        }

        if (!participants || participants.length === 0) {
            return reply("‚ùå Failed to get the member list for this group.");
        }

        // Better way to get the message
        const message = args.join(" ") || "Attention Everyone"; 

        const groupName = groupMetadata.subject;
        const totalMembers = participants.length;

        const emojis = ['üì¢', 'üîä', 'üåê', 'üî∞', '‚ù§‚Äçü©π', 'ü§ç', 'üñ§', 'ü©µ', 'üìù', 'üíó', 'üîñ', 'ü™©', 'üì¶', 'üéâ', 'üõ°Ô∏è', 'üí∏', '‚è≥', 'üóø', 'üöÄ', 'üéß', 'ü™Ä', '‚ö°', 'üö©', 'üçÅ', 'üó£Ô∏è', 'üëª', '‚ö†Ô∏è', 'üî•'];
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

        let teks = `‚ñ¢ Group : *${groupName}*\n‚ñ¢ Members : *${totalMembers}*\n‚ñ¢ Message: *${message}*\n\n‚îå‚îÄ‚îÄ‚îÄ‚ä∑ *MENTIONS*\n`;

        for (const mem of participants) {
            teks += `${randomEmoji} @${mem.id.split('@')[0]}\n`;
        }

        teks += "‚îî‚îÄ‚îÄ‚ú™ ùêêùêÄùêÉùêÑùêÑùêë ‚îÉ ùêÄùêà ‚ú™‚îÄ‚îÄ";

        await conn.sendMessage(from, { 
            text: teks, 
            mentions: participants.map(a => a.id) 
        }, { quoted: mek });

    } catch (e) {
        console.error("TagAll Error:", e);
        reply(`‚ùå *An error occurred.*\n\n${e.message || e}`);
    }
});
